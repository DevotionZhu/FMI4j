
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "c"
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply from: rootProject.file('publisher.gradle')

dependencies {

    api project(':fmi-import-solvers-api')
    api project(':fmi-modeldescription')

    implementation group: 'net.java.dev.jna', name: 'jna', version: '4.5.2'
    implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '4.5.2'

    testImplementation project(':fmi-import-solvers-apache-math3')
    testImplementation group: 'org.siani.javafmi', name: 'fmu-wrapper', version: '2.24.4'

}

shadowJar {
    baseName = archivesBaseName + "-shadow"
    classifier = null
    version = null
}


model {

    platforms {
        linux32 {
            architecture "x86"
            operatingSystem "linux"
        }
        linux64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        win32 {
            architecture "x86"
            operatingSystem "windows"
        }
        win64 {
            architecture "x86_64"
            operatingSystem "windows"
        }
    }

    toolChains {
        gcc(Gcc) {
            target("linux32")
            target("linux64")
            target("win32")
            target("win64")
        }
        clang(Clang) {
            target("linux32")
            target("linux64")
            target("win32")
            target("win64")
        }
    }


    components {
        fmi(NativeLibrarySpec) {
            targetPlatform "linux32"
            targetPlatform "linux64"
            targetPlatform "win32"
            targetPlatform "win64"



            binaries.all {

                cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                if (Os.isFamily(Os.FAMILY_UNIX)) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                }

                if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-fPIC"
                }

            }

        }

    }

    buildTypes {
        release
    }


    tasks {
        buildAllExecutables(Task) {
            dependsOn $.binaries.findAll { it.buildable }
        }
        copyNativeLibs(Copy) {
            from "$buildDir/libs/fmi/shared"
            into "$projectDir/src/main/resources/native/fmi"
            dependsOn buildAllExecutables
        }
    }
}

println System.properties.'java.home'

//task copyNativeLibs(type: Copy) {
//    from "$buildDir/libs/fmi/shared"
//    into "$projectDir/src/main/resources/native/fmi"
//}
//
//copyNativeLibs.dependsOn(buildAllExecutables)
////compileJava.dependsOn(copyNativeLibs)


//task generateJNI(type: Exec) {
//
//    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//
//        commandLine 'cmd', '/c', 'javac'
//
//    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
//
//        commandLine 'javac', "${workingDir}/src/main/java/no/mechatronics/sfi/fmi4j/jni/FmiLibrary.java", "-h", "src/fmi/c"
//
//    } else {
//
//    }
//
//}
//
//generateJNI.dependsOn(compileJava)