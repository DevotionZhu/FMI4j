
import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id "cpp-library"
}

if (!project.getProperties().get("skipBuildNative", false)) {

    library { CppLibrary lib ->

        baseName = "fmi2_jni"

        linkage = [Linkage.SHARED]

        targetMachines = [
                machines.windows.x86,
                machines.windows.x86_64,
                machines.linux.x86_64,
        ]

        lib.binaries.whenElementFinalized { CppBinary binary ->
            project.dependencies {

                add(binary.includePathConfiguration.name, files("${Jvm.current().javaHome}/include"))

                if (OperatingSystem.current().isLinux()) {
                    add(binary.includePathConfiguration.name, files("${Jvm.current().javaHome}/include/linux"))
                } else if (OperatingSystem.current().isWindows()) {
                    add(binary.includePathConfiguration.name, files("${Jvm.current().javaHome}/include/win32"))
                } else {
                    throw new IllegalStateException("Unsupported OS: " + OperatingSystem.current().name)
                }

            }

        }

    }

    def assembleAllRelease = []

    tasks.all {
        if (it.name.contains("assembleRelease")) {
            assembleAllRelease.add(it)
        }
    }

    tasks.register("assembleAllRelease") {
        dependsOn assembleAllRelease
    }

    task copyNativeLibs(type: Copy, dependsOn: assembleAllRelease) {

        into "$rootDir/fmi-import/src/main/resources/native/fmi"

        if (OperatingSystem.current().isLinux()) {
            into("linux64") {
                from "$buildDir/lib/main/release/linux/x86-64"
                include "*.so"
            }
        } else if (OperatingSystem.current().isWindows()) {
            into("win32") {
                from "$buildDir/lib/main/release/windows/x86"
                include "*.dll"
            }
            into("win64") {
                from "$buildDir/lib/main/release/windows/x86-64"
                include "*.dll"
            }
        } else {
            throw new Exception("Unsupported OS: " + OperatingSystem.current().name)
        }

    }

}
