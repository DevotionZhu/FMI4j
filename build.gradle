
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.51" apply false //apply in sub-projects
}

println "Gradle version is ${GradleVersion.current().version}"

ext.hasOssrhUsername = hasProperty("ossrhUsername")
ext.hasOssrhPassword = hasProperty("ossrhPassword")

subprojects { sub ->

    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }


    def slf4j_version = '1.7.25'
    def junit_version = '5.2.0'

    dependencies {

        sub.plugins.withId ('kotlin') {
            compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        }

        implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
        runtimeOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4j_version

        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")

    }

    test {
        useJUnitPlatform()
    }

    sub.plugins.withId ('kotlin') {
        compileKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }
        compileTestKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }
    }


    if(sub.name.startsWith("fmi") && hasOssrhUsername && hasOssrhPassword) {

        def snapshot = true
        group = 'no.mechatronics.sfi.fmi4j'
        version = '0.7.5'
        if (snapshot) {
            version += '-SNAPSHOT'
        }

        println("maven version for $archivesBaseName is: $version")

        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        group = 'no.mechatronics.sfi.fmuproxy'
        version = '0.1-SNAPSHOT'

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {

                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    pom {
                        name = archivesBaseName
                        description = 'A software library for dealing with Functional Mock-up Units (FMUs) on the JVM platform'
                        url = 'https://github.com/SFI-Mechatronics/FMI4j'

                        scm {
                            connection = 'scm:git:git://github.com/SFI-Mechatronics/FMI4j.git'
                            developerConnection = 'scm:git:ssh://github.com/SFI-Mechatronics/FMI4j.git'
                            url = 'https://github.com/SFI-Mechatronics/FMI4j/tree/master'
                        }

                        licenses {
                            license {
                                name = 'The MIT License'
                                url = 'https://opensource.org/licenses/mit-license.php'
                            }
                        }

                        developers {
                            developer {
                                id = 'laht'
                                name = 'Lars Ivar Hatledal'
                                email = 'laht@ntnu.no'
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                    url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }

}



