
println "Gradle version is ${GradleVersion.current().version}"

buildscript {

    ext.kotlin_version = '1.2.51'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

wrapper {
    gradleVersion = '4.9'
}

ext.hasOssrhUsername = hasProperty("ossrhUsername")
ext.hasOssrhPassword = hasProperty("ossrhPassword")

subprojects { sub ->

    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    def slf4j_version = '1.7.25'
    def junit_version = '5.2.0'

    dependencies {

        sub.plugins.withId ('kotlin') {
            compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        }

        implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
        runtimeOnly group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4j_version

        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
        testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")

    }

    test {
        useJUnitPlatform()
    }

    sub.plugins.withId ('kotlin') {
        compileKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }
        compileTestKotlin {
            kotlinOptions.jvmTarget = "1.8"
        }
    }

    if(sub.name.startsWith("fmi") && hasOssrhUsername && hasOssrhPassword) {

        def snapshot = true
        group = 'no.mechatronics.sfi.fmi4j'
        version = '0.7.3'
        if (snapshot) {
            version += '-SNAPSHOT'
        }

        println("maven version for $archivesBaseName is: $version")

        apply plugin: 'maven'
        apply plugin: 'signing'

        task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar (type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }

                    pom.project {
                        name archivesBaseName
                        packaging 'jar'
                        // optionally artifactId can be defined here
                        description 'A software library for dealing with Functional Mock-up Units (FMUs) on the JVM platform'
                        url 'https://github.com/SFI-Mechatronics/fmi4j'

                        scm {
                            connection 'scm:git:git://github.com/SFI-Mechatronics/fmi4j.git'
                            developerConnection 'scm:git:ssh://github.com/SFI-Mechatronics/fmi4j.git'
                            url 'https://github.com/SFI-Mechatronics/fmi4j/tree/master'
                        }

                        licenses {
                            license {
                                name 'The MIT License'
                                url 'https://opensource.org/licenses/mit-license.php'
                            }
                        }

                        developers {
                            developer {
                                id 'laht'
                                name 'Lars Ivar Hatledal'
                                email 'laht@ntnu.no'
                            }
                        }
                    }
                }
            }
        }

    }

}



