
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "cpp"
    id "com.github.johnrengelman.shadow" version "4.0.0"
}

apply from: rootProject.file('publisher.gradle')

dependencies {

    api project(':fmi-import-solvers-api')

    api group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    def jackson_version = '2.9.8'
    implementation group: "com.fasterxml.jackson.module", name: "jackson-module-kotlin", version: jackson_version
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: jackson_version

    testImplementation project(':fmi-import-solvers-apache-math3')
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    testImplementation group: 'org.siani.javafmi', name: 'fmu-wrapper', version: '2.25.0'

}

shadowJar {
    archivesBaseName += "-shadow"
    archiveClassifier = null
    version = null
}

model {

    buildTypes {
        release
    }

    platforms {
        if (Os.isFamily(Os.FAMILY_UNIX)) {
            linux32 {
                architecture "x86"
                operatingSystem "linux"
            }
            linux64 {
                architecture "x86_64"
                operatingSystem "linux"
            }
        } else  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            win32 {
                architecture "x86"
                operatingSystem "windows"
            }
            win64 {
                architecture "x86_64"
                operatingSystem "windows"
            }
        }
    }

    toolChains {
        visualCpp(VisualCpp) {}
        gcc(Gcc) {
            if (Os.isFamily(Os.FAMILY_UNIX)) {
                target("linux32")
                target("linux64")
            }  else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                target("win32")
                target("win64")
            }
        }

    }

    components {
        fmi2(NativeLibrarySpec) {

            baseName = "fmi2_jni"

            if (Os.isFamily(Os.FAMILY_UNIX)) {
                targetPlatform "linux32"
                targetPlatform "linux64"
            } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                targetPlatform "win32"
                targetPlatform "win64"
            }

            binaries.all {

                cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                if (Os.isFamily(Os.FAMILY_UNIX)) {
                    cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    cppCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                }

            }

        }

    }

    tasks {
        buildAllExecutables(Task) {
            dependsOn $.binaries.findAll { it.buildable }
        }
        copyNativeLibs(Copy) {
            from "$buildDir/libs/fmi2/shared"
            include "**/*.dll", "**/*.so"
            into "$projectDir/src/main/resources/native/fmi2"
            dependsOn buildAllExecutables
        }
    }
}

task copyTestFmus(type: Copy) {
    from "$projectDir/../fmus"
    into "$buildDir/resources/test/fmus"
}

testClasses.dependsOn(copyTestFmus)
